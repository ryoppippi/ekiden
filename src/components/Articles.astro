---
import dayjs from "dayjs";
import Article, { type ArticleProps } from "./Article.astro";
import ArticleBooked from "./ArticleBooked.astro";
import ArticleSlot from "./ArticleSlot.astro";
import type { ArticleSlotProps } from "./ArticleSlot.astro";

type Props = {
  articles: Omit<ArticleProps, "firstDay">[];
};

/**
 * トップページに表示する日付を生成する。
 * 生成規則は以下の通り。
 *
 * 開始日: 現在の日付より1ヶ月前
 * 毎週月曜日・水曜日・金曜日
 */
let initialDay = dayjs().subtract(1, "M");

let diff: number;

const _initalDay = initialDay.day();
switch (_initalDay) {
  case 0:
  case 2:
  case 4:
    diff = 1;
    break;
  case 1:
  case 3:
  case 5:
    diff = 0;
    break;
  case 6:
    diff = 2;
    break;
  default:
    /* _initalDay は never になるので、exhaustive になる */
    return _initalDay satisfies never;
}

initialDay = initialDay.add(diff, "d");
type ArticleEntry = {
  state: "published" | "booked";
  article: ArticleProps;
};
type ArticleSlotEntry = {
  state: "empty";
  article: ArticleSlotProps;
};
const entries: (ArticleEntry | ArticleSlotEntry)[] = [];
let today = initialDay;
let yesterday = initialDay.subtract(1, "M");
let firstSlot = true;
while (initialDay.add(2, "M") >= today) {
  const todayStr = today.format("YYYY-MM-DD");
  const article = Astro.props.articles.find(({ date }) => date === todayStr);
  const entry: ArticleEntry | ArticleSlotEntry = article
    ? {
        state: today > dayjs() ? ("booked" as const) : ("published" as const),
        article: {
          ...article,
          date: todayStr,
          firstDay: today.month() !== yesterday.month(),
        },
      }
    : {
        state: "empty" as const,
        article: {
          date: todayStr,
          firstDay: today.month() !== yesterday.month(),
          firstSlot,
        },
      };
  firstSlot = firstSlot && entry.state !== "empty";
  entries.push(entry);
  yesterday = today;
  today = today.add(today.day() >= 4 ? 3 : 2, "d");
}
---

{
  entries.map((entry) =>
    entry.state === "published" ? (
      <Article {...entry.article} />
    ) : entry.state === "booked" ? (
      <ArticleBooked {...entry.article} />
    ) : entry.state == "empty" ? (
      <ArticleSlot {...entry.article} />
    ) : (
      <div />
    ),
  )
}
